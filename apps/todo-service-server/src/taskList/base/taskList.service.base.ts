/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TaskList as PrismaTaskList,
  Task as PrismaTask,
  User as PrismaUser,
  Category as PrismaCategory,
} from "@prisma/client";

export class TaskListServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TaskListCountArgs, "select">): Promise<number> {
    return this.prisma.taskList.count(args);
  }

  async taskLists(
    args: Prisma.TaskListFindManyArgs
  ): Promise<PrismaTaskList[]> {
    return this.prisma.taskList.findMany(args);
  }
  async taskList(
    args: Prisma.TaskListFindUniqueArgs
  ): Promise<PrismaTaskList | null> {
    return this.prisma.taskList.findUnique(args);
  }
  async createTaskList(
    args: Prisma.TaskListCreateArgs
  ): Promise<PrismaTaskList> {
    return this.prisma.taskList.create(args);
  }
  async updateTaskList(
    args: Prisma.TaskListUpdateArgs
  ): Promise<PrismaTaskList> {
    return this.prisma.taskList.update(args);
  }
  async deleteTaskList(
    args: Prisma.TaskListDeleteArgs
  ): Promise<PrismaTaskList> {
    return this.prisma.taskList.delete(args);
  }

  async findTasks(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<PrismaTask[]> {
    return this.prisma.taskList
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tasks(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.taskList
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.taskList
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }
}
